rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      // Allow user to create their own profile during registration
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow user to read their own profile
      allow read: if isOwner(userId);
      
      // Allow user to update their own profile
      allow update: if isOwner(userId);
      
      // Deny deletion for now (can be enabled later if needed)
      allow delete: if false;
    }
    
    // Time slots collection - read for all authenticated users
    match /time_slots/{slotId} {
      // Anyone authenticated can read available slots
      allow read: if isAuthenticated();
      
      // Only admins can create/update/delete slots (for now, deny all writes)
      allow write: if false; // TODO: Add admin role check
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      // Users can only read their own appointments
      allow read: if isAuthenticated() && 
                     resource.data.user_id == request.auth.uid;
      
      // Users can create appointments for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.user_id == request.auth.uid;
      
      // Users can update their own appointments (e.g., cancel)
      allow update: if isAuthenticated() && 
                       resource.data.user_id == request.auth.uid;
      
      // Users can delete their own appointments
      allow delete: if isAuthenticated() && 
                       resource.data.user_id == request.auth.uid;
    }
    
    // Slot locks collection
    match /slot_locks/{lockId} {
      // Users can read their own locks
      allow read: if isAuthenticated() && 
                     resource.data.user_id == request.auth.uid;
      
      // Users can create locks for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.user_id == request.auth.uid;
      
      // Users can delete their own locks
      allow delete: if isAuthenticated() && 
                       resource.data.user_id == request.auth.uid;
      
      // No updates allowed on locks
      allow update: if false;
    }
    
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
